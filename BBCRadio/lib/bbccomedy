#!/bin/bash
#Note: This script used the eval function to pass by reference. First parameter in most cases is the variable name. Use caution.

#GLOBAL VARIABLES - old style

#NO_ENC=echo
#DEBUG=echo

##########################################################################################
##########################################################################################
# Utility functions
#
# Date/Time manipulation, string manipulation
#
##########################################################################################
##########################################################################################

##########################################################################################
# Globals
##########################################################################################

SED=/bin/sed
GNU_DATE=/bin/date
MKDIR=/bin/mkdir

##########################################################################################
# Functions 
##########################################################################################

##########################################################################################
#Function:	set_init_value
#Description:	return the value or the default value of a parameter
#
#Requires:	
#Externals:
#Input:		$1 variable to change
#		$2 value
#		$3 default value
#Returns	Value or default value if value not set
##########################################################################################
set_init_value ()
{
local rc=$2
	
	if [ -z $2 ] ; then rc=$3 ; fi
	eval "$1=${rc}"
}
##########################################################################################

##########################################################################################
#Function: debug_log
#Description: output to debug log file
#
#Input: $1 text to write to log file
#Returns: none
##########################################################################################
debug_log()
{
  echo $@ >> ${g_debug_log}
}

##########################################################################################
#Function: error_log
#Description: output to error log file
#
#Input: $1 text to write to log file
#Returns: none
##########################################################################################
error_log()
{
  echo $@ >> ${g_error_log}
  debug_log $@
  echo $@
}

##########################################################################################
#Function:	make_dir
#Description:	Create directory tree
#
#Requires:	set_init_value
#Externals:	mkdir
#Input:		$1	directory tree to create
#Returns:	none
##########################################################################################
make_dir ()
{
local makedir
set_init_value makedir ${MKDIR} "/bin/mkdir"

	if [ ! -d $1 ] ; then
		${makedir} -p $1 >> ${g_debug_log}
	fi
}
##########################################################################################

##########################################################################################
#Function:	get_datestamp
#Description:	Returned the date specified by a particular offset
#
#Requires:	set_init_value
#Externals:	GNU date
#Input:		$1 variable name for datestame
#		$2 offset
##########################################################################################
get_datestamp()
{
local datestamp=""
local date

set_init_value date ${GNU_DATE} "/bin/date"

	if [ -x ${date} ] ; then
		datestamp=`${date} --date="$2 days" +%Y%m%d`
	else
		error_log FATAL: get_datestamp reports ${date} "(Gnu Date)" is missing or not executable.
		exit 1
	fi
	eval "$1=${datestamp}"
}
##########################################################################################

##########################################################################################
#Function:	get_tv_anytime_datestamp
#Description:	Returned the date specified by a particular offset in the format used
#		by TV_Anytime
#
#Requires:	set_init_value
#Externals:	GNU date
#Input:		$1 variable name for datestame
#		$2 offset
##########################################################################################
get_tv_anytime_datestamp()
{
local datestamp=""
local date

set_init_value date ${GNU_DATE} "/bin/date"

	if [ -x ${date} ] ; then
		datestamp=`${date} --date="$2 days" +%Y-%m-%d\T`
	else
		error_log FATAL: get_datestamp reports ${date} "(Gnu Date)" is missing or not executable.
		exit 1
	fi
	eval "$1=${datestamp}"
}

##########################################################################################
#Function:	get_tv_anytime_timestamp
#Description:	Returned the time specified in the format used
#		by TV-Anytime
#
#Requires:	set_init_value
#Externals:	GNU date
#Input:		$1 variable name for datestame
#		$2 time in hhmm format
get_tv_anytime_time()
{
local timestamp=""

	timestamp=${2:0:2}":"${2:2:2}"00Z"
	eval "$1=${timestamp}"
}

##########################################################################################
#Function:	get_dow
#Description:	Returns the name of the day of the week
#
#Requires:	set_init_value
#Externals:	GNU date
#Input:		$1 variable name
#		$2 offset from current day
#Returns:	Name of the day of the week
##########################################################################################
get_dow ()
{
local dow
local date

set_init_value date ${GNU_DATE} "/bin/date"

	if [ -x ${date} ] ; then
		dow=`"${date}" --date="$2 days" +%w`
	else
		error_log FATAL: get_dow reports ${date} "(Gnu Date)" is missing or not executable.
		exit 1
	fi
	case ${dow} in 
		1) dow="monday"
		;;
		2) dow="tuesday"
		;;
		3) dow="wednesday"
		;;
		4) dow="thursday"
		;;
		5) dow="friday"
		;;
		6) dow="saturday"
		;;
		0) dow="sunday"
		;;
		*) error_log "Unrecognised date:" ${dow}
	esac
	eval "$1=${dow}"
}
##########################################################################################

##########################################################################################
#Function:	normalize_name
#Description:	Returned the name in a "safe" format
#
#Requires:	set_init_value, normalize_description
#Externals:	sed
#Input:		$1 variable name for normalized name
#		$2 name
##########################################################################################
normalize_name ()
{
local name=$2
local sed
set_init_value sed ${SED} "/bin/sed"

	if [ -x ${sed} ] ; then
		name=`echo "$2" | ${sed} -e 's/\ /_/g'`
		normalize_description p_name ${name}
		name=${p_name}
	else
		error_log ERROR: normalize_name reports ${sed} "(sed)" is missing or not executable.
	fi
	eval "$1='${name}'" 
}
##########################################################################################

##########################################################################################
#Function:	normalize_description
#Description:	Returned the description in a "safe" format
#
#Requires:	set_init_value
#Externals:	sed
#Input:		$1 variable name for normalized description
#		$2 description
##########################################################################################
normalize_description ()
{
local name=$2
local sed=""
set_init_value sed ${SED} "/bin/sed"
	
	if [ -x ${sed} ] ; then
		name=`echo "${name}" | ${sed} -e 's/\.//g'`
		name=`echo "${name}" | ${sed} -e 's/\,//g'`
		name=`echo "${name}" | ${sed} -e 's/://g'`
		name=`echo "${name}" | ${sed} -e 's/"//g'`
		name=`echo "${name}" | ${sed} -e "s/'//g"`
	else
		error_log ERROR: normalize_description reports ${sed} "(sed)" is missing or not executable.
	fi
	eval "$1='${name}'" 
}
##########################################################################################
##########################################################################################


##########################################################################################
##########################################################################################
#
# TV-Anytime Functions
#
# Functions for creating and manipulating the TV-Anytime grabber files
#
##########################################################################################


##########################################################################################
# Globals
##########################################################################################
TV_ANYTIME_DIR=~/.borg/TV_Anytime
WGET=/usr/bin/wget
TAR=/bin/tar

##########################################################################################
# Functions 
##########################################################################################

##########################################################################################
#Function: tv_anytime_setup
#Description:	Grabs programme listings to TV_ANYTIME directory tree for the specified day
#
#Requires:	set_init_value, make_dir 
#Externals:	wget, tar
#Input:        	$1 offset
#Returns:  	None
##########################################################################################
tv_anytime_setup()
{
local dir
local grabber
local datestamp
local curdir
local newdatestamp
local offsetcount

set_init_value dir "${TV_ANYTIME_DIR}" "~/.borg/TV_Anytime"
set_init_value grabber "${WGET}" "/usr/bin/wget"
set_init_value tar "${TAR}" "/bin/tar"

	make_dir ${dir}
	get_datestamp p_datestamp $1
	datestamp=${p_datestamp}
	offsetcount=$(( $1 -6 ))
	while [ ${offsetcount} -le $1 ]; do
		get_datestamp p_datestamp ${offsetcount}
		if [ -d ${dir}/${p_datestamp} ] ; then
			debug_log ${dir}/${p_datestamp} exists. Delete to refetch.
			g_tv_anywhere_datestamp=${p_datestamp}
			return 0
		else
			offsetcount=$(( ${offsetcount} +1 ))
		fi
	done
	offsetcount=$(( $1 -6 ))
	found=0
	while [ ${offsetcount} -le $1 ]; do
		get_datestamp p_datestamp ${offsetcount}
		offsetcount=$(( ${offsetcount} +1 ))
		if [ -e ${dir}/${p_datestamp}.tar.gz ] ; then
			found=${p_datestamp}
			g_tv_anywhere_datestamp=${p_datestamp}
			debug_log ${dir}/${p_datestamp}.tar.gz exists. Delete to refetch
		fi
	done
	debug_log ${found}
	debug_log ${datestamp}
	if [ ${found} = 0 ]; then
		if [ -x ${grabber} ] ; then
			${grabber} http://backstage.bbc.co.uk/feeds/tvradio/${datestamp}.tar.gz --output-document=${dir}/${datestamp}.tar.gz
		else
			debug_log ${grabber} "(wget)" is not executable or does not exist
		fi
	else
		datestamp=${found}
	fi
	if [ -e ${dir}/${datestamp}.tar.gz ] ; then
		if [ -x ${tar} ] ; then
			curdir=`pwd`
			cd ${dir}
			${tar} -zxvf ${datestamp}.tar.gz
			if [ -d xml13 ] ; then
				mv xml13 ${datestamp}
			fi
			g_tv_anywhere_datestamp=${p_datestamp}
			cd ${curdir}
		else
			debug_log ${tar} "(tar)" is not executable or does not exist
		fi
	fi
}
##########################################################################################

##########################################################################################
#Function:	tv_anytime_get_details
#Description:	Get Program details from tv_anytime listings
#
#Requires:	set_init_value,  normalize_name, normalize_description 
#Externals:	xmlstarlet
#Input:		$1 variable name for title
#		$2 variable name for description
#		$3 channel
#		$4 datestamp
#		$5 time
##########################################################################################
tv_anytime_get_details()
{
local dir
local xml_file
local tree
local title
local desc
local b_time
local z_time
local crid
local channel
local namespace
local xml
local date

set_init_value date ${GNU_DATE} "/bin/date"
set_init_value dir "${TV_ANYTIME_DIR}" "~/.borg/TV_Anytime"
set_init_value xml "${XML_PARSER}" "/usr/bin/xmlstarlet"

	case $3 in
		"bbc7") channel="BBCSeven"
		;;
		"bbc_radio4") channel="BBCRFour"
		;;
		*) debug_log "Unrecognised channel $3"
		;;
	esac
  
  z_time=$5
	if [ -x ${date} ] ; then
    if [ `date +"%Z"` == "BST" ]; then
      z_time=$(( $5 - 100 ))
    fi
	else
		debug_log get_dow reports ${date} "(Gnu Date)" is missing or not executable, assuming normal daylight hours.
	fi

  b_time=${4:0:4}"-"${4:4:2}"-"${4:6:2}"T"${z_time:0:2}":"${5:2:2}":00Z"
	namespace=' -N t=urn:tva:metadata:2005 '
	xml_file=${g_tv_anywhere_datestamp}/$4${channel}_pl.xml
	tree="//t:ScheduleEvent[t:PublishedStartTime='$b_time']/t:Program"

	crid=`${xml} sel ${namespace} -T -t -m ${tree} -v "@crid" -n ${dir}/${xml_file}`
	xml_file=${g_tv_anywhere_datestamp}/$4${channel}_pi.xml
	tree="//t:ProgramInformation[@programId='${crid}']/t:BasicDescription"

	title=`${xml} sel ${namespace} -T -t -m ${tree} -v "t:Title" -n ${dir}/${xml_file}`
	desc=`${xml} sel ${namespace} -T -t -m ${tree} -v "t:Synopsis[@length='short']" -n ${dir}/${xml_file}`
	normalize_name $1 "${title}"
	normalize_description $2 "${desc}"
}
##########################################################################################

##########################################################################################
##########################################################################################
#
# Bleb Functions
#
# Functions for creating and manipulating the Bleb UK TV grabber files
#
##########################################################################################

##########################################################################################
# Globals
##########################################################################################

BLEB_DIR=~/.borg/bleb
BLEB_CONF="bleb.conf"
BLEB_GRABBER=/usr/bin/tv_grab_uk_bleb
BLEB_TREE=/tv/programme
XML_PARSER=/usr/bin/xmlstarlet

##########################################################################################
# Functions 
##########################################################################################

##########################################################################################
#Function: bleb_setup
#Description:	Grabs programme listings to bleb.xml for the specified day and channel
#
#Requires:	set_init_value, make_dir
#Externals:	tv_grab_uk_bleb
#Input:	   	$1 channel 
#          	$2 offset
#Returns:  	None
##########################################################################################
bleb_setup ()
{
local dir
local conf_file
local grabber
local xml_file=""

set_init_value dir "${BLEB_DIR}" "~/.borg/bleb"
set_init_value conf_file "${BLEB_CONF}" "bleb.conf"
set_init_value grabber "${BLEB_GRABBER}" "/usr/bin/tv_grab_uk_bleb" 

	make_dir ${dir}	
	conf_file=${dir}/${conf_file}
	xml_file=${dir}/${g_datestamp}_$1.xml

	if [ -e ${xml_file} ] ; then
    debug_log ${xml_file} already exists. Delete to download new file.
  else
		echo $1 > ${conf_file}
		if [ -x ${grabber} ] ; then
			${grabber} --output ${xml_file} --days=1 --offset=$2 --config-file ${conf_file} 2>>${g_debug_log} 
		else
			error_log ERROR: bleb_setup reports ${grabber} "(tv_grab_uk_bleb)" is missing or not executable.
		fi
	fi
}
##########################################################################################

##########################################################################################
#Function:	bleb_get_details
#Description:	Get Program details from bleb listings
#
#Requires:	set_init_value, bleb_filename, normalize_name, normalize_description 
#Externals:	xmlstarlet
#Input:		$1 variable name for title
#		$2 variable name for description
#		$3 channel
#		$4 datestamp
#		$5 time
##########################################################################################
bleb_get_details ()
{
local dir
local xml_file
local tree
local title
local desc
local b_time

set_init_value dir "${BLEB_DIR}" "~/.borg/bleb"
set_init_value tree "${BLEB_TREE}" "/tv/programme"
set_init_value xml "${XML_PARSER}" "/usr/bin/xmlstarlet"
xml_file=""
title=""
desc=""

	b_time=$4$5"00 +0100"
	xml_file=${dir}/$4_$3.xml

	title=`${xml} sel -T -t -m ${tree}[@start="'${b_time}'"] -v title -n ${xml_file}`
	desc=`${xml} sel -T -t -m ${tree}[@start="'${b_time}'"] -v desc -n ${xml_file}`

	normalize_name $1 "${title}"
	normalize_description $2 "${desc}"
}
##########################################################################################



##########################################################################################
##########################################################################################
#
# Radio Functions
#
# Functions for recording radio programmes
#
##########################################################################################

##########################################################################################
#Function:	record_radio
#Description:	Record radio programs from the given url to a filename detected from the programme listings. Skip if file exists or is a duplicate, or cannot be found
#
#Externals:	mplayer, lame, cat, rm
#Input:		$1 url
#		$2 datestamp
#		$3 time of recording
#		$4 channel
##########################################################################################
radio_record ()
{
check_file=""
local name
local desc
local long_name
local check_file
local initial
local recorded
local record_date
local record_time
local broadcast_date

  record_date=$2
  record_time=$3
	debug_log $2 $3 $4
	recorded=1
#	bleb_get_details p_name p_desc $4 $2 $3 
	tv_anytime_get_details p_name p_desc $4 $2 $3 
	if [ "${p_name}" = "" ] ; then
		if [ $3 = 1830 ] ; then
#			bleb_get_details p_name p_desc $4 $2 1832
			tv_anytime_get_details p_name p_desc $4 $2 1832
		fi
	fi
	if [ "${p_name}" = "" ] ; then
		name="Unknown"
		desc="Unknown"
		check_file=$2_$3_$4_${name}.chk
	else
		name=${p_name}
		desc=${p_desc}
		check_file=$2_$4_${name}.chk
#    fi
#   Moved the end point to stop trying to record unknown programmes
    debug_log Attempting to record ${name}
    debug_log Description ${desc}
    long_name=$2_$3_$4_${name}
    if [ "${name:0:4}" = "The_" ] ; then
      initial=${name:4:1}
    else
      if [ "${name:0:3}" = "An_" ] ; then
        initial=${name:3:1}
      else
        if [ "${name:0:2}" = "A_" ] ; then
          initial=${name:2:1}
        else
          initial=${name:0:1}
        fi
      fi
    fi
    if [ ${initial} -eq ${initial} 2>/dev/null ] ; then initial='0' ; fi
    if [ -e ${g_chk}/$check_file ]; then
      desc2=`cat ${g_chk}/${check_file}` 
      if [ "${desc:0:50}" = "${desc2:0:50}" ] ; then
        debug_log Won\'t record ${g_mp3}/${initial}/${name}/${long_name}.mp3 while ${g_chk}/${check_file} exists.
        echo ${name} exists.
      fi
    else
      if [ -e ${g_mp3}/${initial}/${name}/${long_name}.mp3 ] ; then
        debug_log ${g_mp3}/${name}/${long_name}.mp3 already exists. Delete to rerecord.
        echo ${name} exists.
      else
        if [ -e ${g_mp3}/U/Unknown/$2_$3_$4_Unknown.mp3 ] ; then
          debug_log Unknown file with same details exists. Moving to correct location.
          make_dir ${g_mp3}/${initial}/${name}
          mv ${g_mp3}/U/Unknown/$2_$3_$4_Unknown.mp3 ${g_mp3}/${initial}/${name}/${long_name}.mp3
          echo ${name} exists.
        else
          if [ -e ${g_wav}/${initial}/${name}/${long_name}.wav ] ; then
            debug_log ${g_wav}/${initial}/${name}/${long_name}.wav exists. Delete to rerecord. Will continue with mp3 encoding.
          else
            if [ -e ${g_wav}/U/Unknown/$2_$3_$4_Unknown.wav ] ; then
              debug_log Unknown file with same details exists. Moving to correct location.
              make_dir ${g_wav}/${initial}/${name}
              mv ${g_wav}/U/Unknown/$2_$3_$4_Unknown.wav ${g_wav}/${initial}/${name}/${long_name}.wav
            else
              echo Recording ${name}.
              make_dir ${g_wav}/${initial}/${name}
              ${DEBUG} mplayer -prefer-ipv4 -vc null -vo null -bandwidth 99999999999 -ao pcm:fast -ao pcm:waveheader -ao pcm:file=${g_wav}/${initial}/${name}/${long_name}.wav $1 2>/dev/null
              if [ -e ${g_wav}/${initial}/${name}/${long_name}.wav ] ; then
                debug_log ${g_wav}/${initial}/${name}/${long_name}.wav recording successful. 
              else
                error_log ${g_wav}/${initial}/${name}/${long_name}.wav recording failed.
                recorded=0
              fi
            fi
          fi
        fi
      fi
    fi
   	encode_radio ${name} ${long_name} ${check_file} ${recorded} ${initial} "${desc}" $2 $3 &
  fi
}

##########################################################################################
#Function:	encode_radio
#Description:	Encode supplied wav file into mp3
#
#Externals:	lame, cat, rm
#Input:		$1 name
#		$2 long_name
#	 	$3 check_file
#		$4 recorded flag
#   $5 initial
#   $6 desc
#   $7 date
#   $8 time
##########################################################################################
encode_radio ()
{
local check_file
local name
local long_name
local recorded
local initial
local desc
local record_date
local record_time
local broadcast_info
local track

  name=$1
  long_name=$2
  check_file=$3
  recorded=$4
  initial=$5
  desc=$6
  record_date=$7
  record_time=$8
  
  if [ ! -e ${g_mp3}/${initial}/${name}/${long_name}.mp3 ] ; then
  	while [ 1 ]; do
			if [ ! -e "${g_enc_lock_file}" ] ; then
				echo `date` > ${g_enc_lock_file}
        if [ -e ${g_wav}/${initial}/${name}/${long_name}.wav ] ; then
          make_dir ${g_mp3}/${initial}/${name}
          echo MP3 encoding ${name}.
          debug_log MP3 encoding ${name}.
					${NO_ENC} ${DEBUG} lame ${g_wav}/${initial}/${name}/${long_name}.wav ${g_mp3}/${initial}/${name}/${long_name}.mp3 2>/dev/null
					${NO_ENC} ${DEBUG} rm ${g_wav}/${initial}/${name}/${long_name}.wav 
					rm ${g_enc_lock_file}
          if [ -e ${g_mp3}/${initial}/${name}/${long_name}.mp3 ] ; then
            echo ${desc} > ${g_chk}/${check_file}
            broadcast_date=`grep -oh '[1-2][0-9]\{3\}' ${g_chk}/${check_file}`
            if [ ${broadcast_date}. == . ]; then
              broadcast_date=${record_date}
            fi
            track=`grep -oh '[1-2][0-9]\{0,2\}\ of' ${g_chk}/${check_file} | grep -oh '[1-2][0-9]\{0,2\}'`
            if [ ${track}. == . ]; then
              track='0'
            fi
            debug_log Setting MP3 id tags for ${name}.
            mp3info -n "${track}" -l "${name}" -a "${name}" -t "${desc}" -c "${desc}" -y "${broadcast_date:0:4}" -g 57 ${g_mp3}/${initial}/${name}/${long_name}.mp3
          fi
        else
          rm ${g_enc_lock_file}
        fi
        if [ ! -e ${g_guide}/${long_name}.txt ] ; then
          make_dir ${g_guide}
          debug_log Adding missing guide details for ${name} to ${g_guide}/${long_name}.txt
          echo ${name} > ${g_guide}/${long_name}.txt
          echo ${desc} >> ${g_guide}/${long_name}.txt
        fi
				break
      else
        debug_log "Delaying encoding of ${name}. Encoding lock file ${g_enc_lock_file} exists. If nothing is encoding delete this and retry."
        sleep 120
        debug_log "Waking up encoding of ${name}"
      fi
		done
	fi
	return ${recorded}
}

##########################################################################################

##########################################################################################
##########################################################################################
#	Main function
#
#	Entry point for the Record Radio Function
#
##########################################################################################

main ()
{
# Create required directories
	make_dir ${g_root}
	make_dir ${g_wav}
	make_dir ${g_mp3}
	make_dir ${g_chk}
	make_dir ${g_guide}
	make_dir ${g_mp3cd}
	cd ${g_root}

# Get Datestamp and Day of Week
	get_datestamp g_datestamp ${g_offset}
	get_dow g_dow ${g_offset}
  echo ========================
  echo ${g_datestamp}
  echo ========================

# Setup Bleb programme listings for required channels and dates
#	bleb_setup ${g_radio4} ${g_offset} 
#	bleb_setup ${g_bbc7} ${g_offset}

# Setup TV-Anytime programme listings for required dates
	tv_anytime_setup ${g_offset}
	
	for g_time in 1830 2300
	do
	  recorded=0
	  if [ ${recorded} = 0 ] ; then
		g_url=rtsp://rmv8.bbc.net.uk:554/radio4fmcoyopa/radio_4_fm_-_${g_dow}_${g_time}.ra 
		radio_record ${g_url} ${g_datestamp} ${g_time} ${g_radio4}
		recorded=$?
	  fi
	done
	
	for g_time in 1800 1830 1845 2200 2230 2300 2315 2330 2345 
	do
		g_url=rtsp://rmv8.bbc.net.uk:554/bbc7coyopa/bbc7_-_${g_dow}_${g_time}.ra
		radio_record ${g_url} ${g_datestamp} ${g_time} ${g_bbc7}
	done
}
##########################################################################################
##########################################################################################


##########################################################################################
##########################################################################################
#
#	Real Main 
#
#	Actual entry point for the shell script
#
##########################################################################################
#GLOBAL VARIABLES - new style

set_init_value g_root ${ROOT_DIR} "~/radio"
set_init_value g_wav ${WAV_DIR} ${g_root}/"episodes"
set_init_value g_mp3 ${MP3_DIR} ${g_root}/"episodes"
set_init_value g_mp3cd ${MP3CD_DIR} ${g_root}/"mp3cd"
set_init_value g_chk ${CHK_DIR} ${g_root}/"check"
set_init_value g_guide ${GUIDE_DIR} ${g_root}/"guide"
set_init_value g_radio4 ${RADIO4} "bbc_radio4"
set_init_value g_bbc7 ${BBC7} "bbc7"
set_init_value g_error_log ${ERROR_LOG} ${g_root}/"error.log"
set_init_value g_debug_log ${DEBUG_LOG} ${g_root}/"debug.log"
set_init_value g_lock_file ${LOCK} ${g_root}/"bbccomedy.lck"
set_init_value g_enc_lock_file ${ENC_LOCK} ${g_root}/"lame.lck"

if [ ! -e "${g_lock_file}" ] ; then
	echo `date` > ${g_lock_file}
  error_log `date`
	debug_log BBC Radio Recording Programme starting 
	while [ -n "$1" ]; do
	set_init_value g_offset $1 -1
		main $1 
		shift
	done
  debug_log BBC Radio Recording Programme exiting
	rm ${g_lock_file}
else
  error_log "Lock file ${g_lock_file} exists. If nothing is recording delete this and retry."
fi
##########################################################################################

